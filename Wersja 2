import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;

public class DrawingApp extends JFrame {
    private DrawingPanel drawingPanel;
    private Rectangle currentRectangle;
    private int initialX, initialY;

    public DrawingApp() {
        drawingPanel = new DrawingPanel();
        drawingPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                initialX = e.getX();
                initialY = e.getY();
                currentRectangle = new Rectangle(initialX, initialY, 0, 0);
                drawingPanel.addRectangle(currentRectangle);
            }
        });

        drawingPanel.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                int width = e.getX() - initialX;
                int height = e.getY() - initialY;
                currentRectangle.setSize(width, height);
                drawingPanel.repaint();
            }
        });

        drawingPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                Thread thread = new Thread(new RectangleThread(drawingPanel, currentRectangle));
                thread.start();
                currentRectangle = null;
            }
        });

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("Drawing App");
        setSize(600, 600);
        setLocationRelativeTo(null);
        add(drawingPanel, BorderLayout.CENTER);
        setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DrawingApp();
            }
        });
    }
}

class DrawingPanel extends JPanel {
    private List<Rectangle> rectangles;

    public DrawingPanel() {
        rectangles = new ArrayList<>();
        setPreferredSize(new Dimension(600, 600));
        setBackground(Color.WHITE);
    }

    public void addRectangle(Rectangle rectangle) {
        rectangles.add(rectangle);
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        for (Rectangle rectangle : rectangles) {
            g2d.setColor(Color.BLUE);
            g2d.fill(rectangle);
            g2d.setColor(Color.BLACK);
            g2d.draw(rectangle);
        }
    }
}

class RectangleThread implements Runnable {
    private DrawingPanel drawingPanel;
    private Rectangle rectangle;

    public RectangleThread(DrawingPanel drawingPanel, Rectangle rectangle) {
        this.drawingPanel = drawingPanel;
        this.rectangle = rectangle;
    }

    @Override
    public void run() {
        try {
            int y = rectangle.y;
            while (y < drawingPanel.getHeight() - rectangle.height) {
                Thread.sleep(50);
                y++;
                rectangle.y = y;
                drawingPanel.repaint();
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
